import React from 'react';
import ReactDOM from 'react-dom/client';
/* используем для рендеринга */
import './index.css';
import App from './App';
/* import reportWebVitals from './reportWebVitals'; */
/* стороння библиотека измеряющая производительность */
import {Header} from './App';
/* мы импортирвоали функцию */

function Elem() {
   return (
    <div>
   <h2>Hello World!</h2>;
      <h2>Hello World!</h2>;
      </div>
      )  
};

const elem = React.createElement('h2', {className: 'greetengs'}, 'Hello World');
const somet = 'Hey Dudes'
/* аналог кода с функции */
const elemTwo = <h2>Hello World!</h2>;
/* ещу один аналог все происходит через virtual dom */
const elemThree = (
<div>
  <h2>{somet}</h2>
  {/* вставляем наш текст из переменной */}
  <h2>{2+2}</h2>
  {/* можно вставлять любые математические операции  и т.д. кроме объектво!! также запрещенное помещать функцию в input
    это защита от вредителей*/}
  <h2 className="dude">Hello World! {somet}</h2>
  {/* атрибуты всегда пишим так в camekCase */}
  <h2>Hello World!</h2>
  <button tabsIndex="0">Click</button>
  <label htmlFor=""></label>
</div>)

const root = ReactDOM.createRoot(document.getElementById('root'));
/* создаем корневой уЗел и помещаем в элемент с id root */
root.render(  
  <React.StrictMode>
    {elemThree}
    {/* так мы можем вставить наш код-перменную */}
    <Elem />
    <App />
  </React.StrictMode>
);
/* strictmodde используется для обнаружения потенциальных проьлем  */
/* его можто импортировать отдельно 
import React, {StrictMode} from 'react'; */

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
/* reportWebVitals(); */

/* 
Strict Mode и React 18+
Совместимость актуальной версии React 18 и этого компонента
Актуальная на этот момент версия библиотеки принесла несколько изменений, ломающих некоторый функционал. Так называемых Breaking Changes. Одно из них мы рассмотрели в уроке про JSX, где немного поменялся способ рендера приложения на страницу. А второе, которое волнует нас сейчас, касается компонента Strict Mode:


Обратите внимание на этот пункт. Можете даже не переводить все, мы еще пройдем все эти термины. Достаточно выделенного мною текста. Потенциально это очень крутая возможность. Но она может поломать части вашего приложения. Причем только в режиме разработки. В готовой версии приложения все будет в порядке, так как и сам этот компонент там не работает.

Так что на данный момент я не рекомендую использовать этот компонент в своих приложениях. Хотя бы до 9го модуля. В ответах он будет пока оставлен, так как там используется 17я версия. Это + новый синтаксис рендера самого приложения - это единственная разница.

К тому же, мы обнаружили, что часть сторонних библиотек тоже сейчас конфликтует с этим компонентом, например React Router (будет изучен позже).

Что можно сделать?
Этот пункт стоит читать потом, когда вы закончите 8й модуль. И если вам интересно, конечно же :)

Версия новая, мои боевые проекты еще не перешли на неё. Но насколько я понимаю, теперь нужно каждый компонент "сбрасывать" при его размонтировании. То есть, возвращать state в то состояние, которое должно быть изначально. Если только нет нужды в сохранении.

Для этого можно воспользоваться componentWillUnmount или возвратом функции из useEffect. Но все это сугубо индивидуально для разных компонентов, ведь есть еще те, что конфликтуют с другими библиотеками. Возможно, с новыми апдейтами, все исправится. Но нужно быть начеку)
 */